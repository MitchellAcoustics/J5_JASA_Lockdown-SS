Natural_model <- lmerTest::get_model(step_Natural_model)
sjPlot::tab_model(Natural_model, show.icc = TRUE, collapse.ci = TRUE, show.aic = TRUE)
sjPlot::plot_model(Natural_model, type="re", title = "Random effects - Natural", show.values = TRUE)
sjPlot::plot_model(Natural_model, show.values = TRUE)
MuMIn::r.squaredGLMM(Natural_model)
feature_string <- paste(c("LAeq", "LAeq_10_LAeq_90", "PeakSpectralCentroid", "SIL_50", "N_5", "R", "S", "I", "FS"), collapse = " + ")
Traffic_formula <- as.formula(glue("Traffic ~ 1 + ", feature_string, " + (1 + ", feature_string, "|LocationID)"))
init_Traffic_model <- lmerTest::lmer(Traffic_formula, data = prelockdownData)
step_Traffic_model <- lmerTest::step(init_Traffic_model, data = prelockdownData)
step_Traffic_model
Traffic_model <- lmerTest::get_model(step_Traffic_model)
sjPlot::tab_model(Traffic_model, show.icc = TRUE, collapse.ci = TRUE, show.aic = TRUE)
sjPlot::plot_model(Traffic_model, type="re", title = "Random effects - Traffic", show.values = TRUE)
sjPlot::plot_model(Traffic_model, show.values = TRUE)
MuMIn::r.squaredGLMM(Traffic_model)
Human_formula <- as.formula(glue("Human ~ 1 + ", feature_string, " + (1 + ", feature_string, "|LocationID)"))
init_Human_model <- lmerTest::lmer(Human_formula, data = prelockdownData)
step_Human_model <- lmerTest::step(init_Human_model, data = prelockdownData)
step_Human_model
Human_model <- lmerTest::get_model(step_Human_model)
sjPlot::tab_model(Human_model, show.icc = TRUE, collapse.ci = TRUE, show.aic = TRUE)
sjPlot::plot_model(Human_model, type="re", title = "Random effects - Traffic", show.values = TRUE)
sjPlot::plot_model(Human_model, show.values = TRUE)
MuMIn::r.squaredGLMM(Human_model)
knitr::opts_chunk$set(echo = TRUE)
feature_string <- paste(c("N_5", "S", "R", "I", "FS", "LAeq", "LAeq_10_LAeq_90", "LCeq_LAeq", "SIL_50", "PeakSpectralCentroid"), collapse = " + ")
feature_string <- paste(c("N_5", "S", "R", "I", "FS", "LAeq", "LAeq_10_LAeq_90", "LCeq_LAeq", "SIL_50", "PeakSpectralCentroid"), collapse = " + ")
feature_string
knitr::opts_chunk$set(echo = TRUE)
feature_string <- paste(c("N_5", "S", "R", "I", "FS", "LAeq", "LAeq_10_LAeq_90", "LCeq_LAeq", "SIL_50", "PeakSpectralCentroid"), collapse = " + ")
feature_string
library(here)
library(readxl)
library(dplyr)
library(correlation)
prelockdownData <- read.csv(here("data", "2020-09-01", "preLockdownData.csv"))
lockdownData <- read.csv(here("data", "2020-09-01", "lockdownData.csv"))
prelockdownData <- prelockdownData %>% mutate_at(vars(GroupID, LocationID), funs(as.factor))
prelockdownData['Lockdown'] <- 1
lockdownData <- lockdownData %>% mutate_at(vars(GroupID, LocationID), funs(as.factor))
lockdownData['Lockdown'] <- 2
fullData <- rbind(prelockdownData, lockdownData)
scaleData <- fullData[, -c(1, 2, 161, 163)]
scaleData[, -c(1:8, 158:159)] <- scale(scaleData[, -c(1:8, 158:159)])
prelockdownData <- scaleData %>% filter(Lockdown == 1)
lockdownData <- scaleData %>% filter(Lockdown == 2)
features <- c("N_5", "S", "R", "I", "FS", "LAeq", "LAeq_10_LAeq_90", "LCeq_LAeq", "SIL_50", "PeakSpectralCentroid")
feature_string <- paste(features, collapse = " + ")
feature_string
features <- c("N_5", "S", "R", "I", "FS", "LAeq", "LAeq_10_LAeq_90", "LCeq_LAeq", "SIL_50", "PeakSpectralCentroid")
feature_string <- paste(features, collapse = " + ")
feature_string
library(readxl)
library(tidyr)
data <- read_excel(here("data", "2021-04-16", "AllLondonVenice_combined.xlsx"))
data <- as_tibble(data)
data
data[c(features)]
View(data)
features <- c("N5", "S", "R", "I", "FS", "LAeq", "LA10_LA90", "LCeq_LAeq", "SIL.rms.", "PeakSpectralCentroid")
feature_string <- paste(features, collapse = " + ")
feature_string
library(readxl)
library(tidyr)
data <- read_excel(here("data", "2021-04-16", "AllLondonVenice_combined.xlsx"))
data <- as_tibble(data)
data[features]
data[c("Pleasant", features)]
data[c("GroupID", "LocationID", "Pleasant", "Eventful", "Human", "Traffic", "Natural", features)]
library(readxl)
library(tidyr)
data <- read_excel(here("data", "2021-04-16", "AllLondonVenice_combined.xlsx"))
data <- as_tibble(data)
data <- data[c("GroupID", "LocationID", "Lockdown", "Pleasant", "Eventful", "Human", "Traffic", "Natural", features)]
library(readxl)
library(tidyr)
data <- read_excel(here("data", "2021-04-16", "AllLondonVenice_combined.xlsx"))
data <- as_tibble(data)
data <- data[c("GroupID", "LocationID", "Lockdown", "Pleasant", "Eventful", "Human", "Traffic", "Natural", features)]
head(data)
styler:::style_active_file()
data <- data %>% mutate_at(vars(GroupID, LocationID, Lockdown), funs(as.factor))
data <- data %>% mutate_at(vars(c("Pleasant", "Eventful", "Traffic", "Human", "Natura", features)), funs(as.factor))
data <- data %>% mutate_at(vars(GroupID, LocationID, Lockdown), funs(as.factor))
data <- data %>% mutate_at(vars(c("Pleasant", "Eventful", "Traffic", "Human", "Natural", features)), funs(as.factor))
head(data)
data <- data %>% mutate_at(vars(GroupID, LocationID, Lockdown), funs(as.factor))
data <- data %>% mutate_at(vars(c("Pleasant", "Eventful", "Traffic", "Human", "Natural", features)), funs(as.numeric))
head(data)
knitr::opts_chunk$set(echo = TRUE)
features <- c("N5", "S", "R", "I", "FS", "LAeq", "LA10_LA90", "LCeq_LAeq", "SIL.rms.", "PeakSpectralCentroid")
feature_string <- paste(features, collapse = " + ")
feature_string
library(readxl)
library(tidyr)
data <- read_excel(here("data", "2021-04-16", "AllLondonVenice_combined.xlsx"))
data <- as_tibble(data)
data <- data[c("GroupID", "LocationID", "Lockdown", "Pleasant", "Eventful", "Human", "Traffic", "Natural", features)]
head(data)
data <- data %>% mutate_at(vars(GroupID, LocationID, Lockdown), funs(as.factor))
data <- data %>% mutate_at(vars(c("Pleasant", "Eventful", "Traffic", "Human", "Natural", features)), funs(as.numeric))
head(data)
?tibble
info(data)
size(data)
print.tbl(data)
view(data)
print(data)
dim(data)
library(readxl)
library(tidyr)
data <- read_excel(here("data", "2021-04-16", "AllLondonVenice_combined.xlsx"))
data <- as_tibble(data)
data <- data[c("GroupID", "LocationID", "Lockdown", "Pleasant", "Eventful", "Human", "Traffic", "Natural", features)]
print(dim(data))
head(data)
library(readxl)
library(tidyr)
data <- read_excel(here("data", "2021-04-16", "AllLondonVenice_combined.xlsx"))
data <- as_tibble(data)
data <- data[c("GroupID", "LocationID", "Lockdown", "Pleasant", "Eventful", "Human", "Traffic", "Natural", features)]
print(dim(data))
head(data)
library(readxl)
library(tidyr)
data <- read_excel(here("data", "2021-04-16", "AllLondonVenice_combined.xlsx"))
data <- as_tibble(data)
data <- data[c("GroupID", "LocationID", "Lockdown", "Pleasant", "Eventful", "Human", "Traffic", "Natural", features)]
print("Full data table has dimensions: ", dim(data))
library(readxl)
library(tidyr)
data <- read_excel(here("data", "2021-04-16", "AllLondonVenice_combined.xlsx"))
data <- as_tibble(data)
data <- data[c("GroupID", "LocationID", "Lockdown", "Pleasant", "Eventful", "Human", "Traffic", "Natural", features)]
print(glue("Full data table has dimensions: ", dim(data)))
library(readxl)
library(glue)
library(tidyr)
data <- read_excel(here("data", "2021-04-16", "AllLondonVenice_combined.xlsx"))
data <- as_tibble(data)
data <- data[c("GroupID", "LocationID", "Lockdown", "Pleasant", "Eventful", "Human", "Traffic", "Natural", features)]
print(glue("Full data table has dimensions: ", dim(data)))
library(readxl)
library(glue)
library(tidyr)
data <- read_excel(here("data", "2021-04-16", "AllLondonVenice_combined.xlsx"))
data <- as_tibble(data)
data <- data[c("GroupID", "LocationID", "Lockdown", "Pleasant", "Eventful", "Human", "Traffic", "Natural", features)]
print("Full data table has dimensions: ", dim(data))
library(readxl)
library(glue)
library(tidyr)
data <- read_excel(here("data", "2021-04-16", "AllLondonVenice_combined.xlsx"))
data <- as_tibble(data)
data <- data[c("GroupID", "LocationID", "Lockdown", "Pleasant", "Eventful", "Human", "Traffic", "Natural", features)]
disp("Full data table has dimensions: ", dim(data))
library(readxl)
library(glue)
library(tidyr)
data <- read_excel(here("data", "2021-04-16", "AllLondonVenice_combined.xlsx"))
data <- as_tibble(data)
data <- data[c("GroupID", "LocationID", "Lockdown", "Pleasant", "Eventful", "Human", "Traffic", "Natural", features)]
print("Full data table has dimensions: ")
print(dim(data))
head(data)
library(readxl)
library(glue)
library(tidyr)
data <- read_excel(here("data", "2021-04-16", "AllLondonVenice_combined.xlsx"))
data <- as_tibble(data)
data <- data[c("GroupID", "LocationID", "Lockdown", "Pleasant", "Eventful", "Human", "Traffic", "Natural", features)]
print("Full data table has dimensions: ")
print(dim(data))
head(data)
library(readxl)
library(glue)
library(tidyr)
data <- read_excel(here("data", "2021-04-16", "AllLondonVenice_combined.xlsx"))
data <- as_tibble(data)
data <- data[c("GroupID", "LocationID", "Lockdown", "Pleasant", "Eventful", "Human", "Traffic", "Natural", features)]
print("Full data table has dimensions: ")
print(dim(data))
print(head(data))
library(readxl)
library(glue)
library(tidyr)
data <- read_excel(here("data", "2021-04-16", "AllLondonVenice_combined.xlsx"))
data <- as_tibble(data)
data <- data[c("GroupID", "LocationID", "Lockdown", "Pleasant", "Eventful", "Human", "Traffic", "Natural", features)]
print("Full data table has dimensions: ")
print(dim(data))
print(data)
?caTools
??caTools
install.packages("caTools")
?caTools
library(caTools)
?caTools
prelockdownData <- data %>% filter(Lockdown == 1)
lockdownData <- data %>% filter(Lockdown == 2)
# Train-test split
library(caTools)
set.seed(42)
sample = sample.split(prelockdownData, SplitRatio = 0.75)
train = subset(prelockdownData, sample==TRUE)
install.packages("glmmLasso")
library(glmmLasso)
formula <- as.formula(glue("Pleasant ~ ", feature_string))
formula
res <- glmmLasso(fix=formula, rnd=list(glue("LocationID=~1 + ", feature_string)), data=data)
res <- glmmLasso(fix=formula, rnd=list(glue("LocationID=~1 + ", feature_string)), data=prelockdownData)
prelockdownData$N5
length(prelockdownData$N5)
length(prelockdownData$Pleasant)
res <- glmmLasso(fix=formula, rnd=list(glue("LocationID=~1 + ", feature_string)), data=prelockdownData)
fix <- as.formula(glue("Pleasant ~ ", feature_string))
fix
rnd = as.formula(glue("LocationID=~1 + ", feature_string))
rnd <- glue("LocationID=~1 + ", feature_string)
rnd
res <- glmmLasso(fix=fix, rnd=list(rnd), data=prelockdownData)
length(prelockdownData$LocationID)
rnd <- glue("LocationID~1 + ", feature_string)
res <- glmmLasso(fix=fix, rnd=list(rnd), data=prelockdownData)
rnd <- as.formula(glue("LocationID~1 + ", feature_string))
rnd
res <- glmmLasso(fix=fix, rnd=list(rnd), data=prelockdownData)
res <- glmmLasso(fix=fix, rnd=rnd, data=prelockdownData)
res <- glmmLasso(fix=fix, rnd=NULL, data=prelockdownData)
lm(fix, data=prelockdownData)
length(data[c(features)])
length(data$N5
)
length(prelockdownData$LocationID)
length(prelockdownData$Pleasant)
length(prelockdownData$N5)
length(prelockdownData$S)
length(prelockdownData$R)
length(prelockdownData$I)
length(prelockdownData$FS)
length(prelockdownData$LAeq)
length(prelockdownData$LA10_LA90)
length(prelockdownData$LCeq_LAeq)
res <- glmmLasso(Pleasant ~ N5 + S + R, rnd = list(LocationID=~1), data=prelockdownData)
res <- glmmLasso(Pleasant ~ I + S + R, rnd = list(LocationID=~1), data=prelockdownData)
install.packages("groupdata2")
library(readxl)
library(glue)
library(tidyr)
library(knitr)
data <- read_excel(here("data", "2021-04-16", "AllLondonVenice_combined.xlsx"))
data <- as_tibble(data)
data <- data[c("GroupID", "LocationID", "Lockdown", "Pleasant", "Eventful", "Human", "Traffic", "Natural", features)]
print("Full data table has dimensions: ")
print(dim(data))
kable(data)
library(readxl)
library(glue)
library(tidyr)
library(knitr)
data <- read_excel(here("data", "2021-04-16", "AllLondonVenice_combined.xlsx"))
data <- as_tibble(data)
data <- data[c("GroupID", "LocationID", "Lockdown", "Pleasant", "Eventful", "Human", "Traffic", "Natural", features)]
print("Full data table has dimensions: ")
print(dim(data))
print(data)
prelockdownData <- data %>% filter(Lockdown == 1)
lockdownData <- data %>% filter(Lockdown == 2)
# Train-test split
library(groupdata2)
set.seed(42)
partition(prelockdownData, p=0.2, id_col="LocationID")
partition(prelockdownData, p=0.2, id_col="GroupID")
subset(data, Lockdown==1)
data
data <- data %>% mutate_at(vars(GroupID, LocationID, Lockdown), funs(as.factor))
data <- data %>% mutate_at(vars(c("Pleasant", "Eventful", "Traffic", "Human", "Natural", features)), funs(as.numeric))
head(data)
prelockdownData <- data %>% filter(Lockdown == 1)
lockdownData <- data %>% filter(Lockdown == 2)
# Train-test split
library(groupdata2)
set.seed(42)
partition(prelockdownData, p=0.2, id_col="LocationID")
partition(prelockdownData, p=0.2, id_col="LocationID")[1]
prelockdownData <- data %>% filter(Lockdown == 1)
lockdownData <- data %>% filter(Lockdown == 2)
# Train-test split
library(groupdata2)
set.seed(42)
parts = partition(prelockdownData, p=0.2, id_col="LocationID")
train = parts[[1]]
test = parts[[2]]
print(train)
summary(train)
prelockdownData <- data %>% filter(Lockdown == 1)
lockdownData <- data %>% filter(Lockdown == 2)
# Train-test split
library(groupdata2)
set.seed(42)
parts = partition(prelockdownData, p=0.2, id_col="LocationID")
train = parts[[1]]
test = parts[[2]]
summary(train)
prelockdownData <- data %>% filter(Lockdown == 1)
lockdownData <- data %>% filter(Lockdown == 2)
# Train-test split
library(groupdata2)
set.seed(42)
parts = partition(prelockdownData, p=0.2, id_col="LocationID")
train = parts[[1]]
test = parts[[2]]
kable(summary(train))
prelockdownData <- data %>% filter(Lockdown == 1)
lockdownData <- data %>% filter(Lockdown == 2)
# Train-test split
library(groupdata2)
set.seed(42)
parts = partition(prelockdownData, p=0.2, id_col="LocationID")
train = parts[[1]]
test = parts[[2]]
summary(train)
summar(test)
summary(test)
prelockdownData <- data %>% filter(Lockdown == 1)
lockdownData <- data %>% filter(Lockdown == 2)
# Train-test split
library(groupdata2)
set.seed(42)
parts = partition(prelockdownData, p=0.2, cat_col="LocationID")
train = parts[[1]]
test = parts[[2]]
summary(train)
summary(test)
prelockdownData <- data %>% filter(Lockdown == 1)
lockdownData <- data %>% filter(Lockdown == 2)
# Train-test split
library(groupdata2)
set.seed(42)
parts = partition(prelockdownData, p=0.2, cat_col="LocationID")
train = parts[[2]]
test = parts[[1]]
summary(train)
summary(test)
Pleasant_formula <- as.formula(glue("Pleasant ~ 1 + ", feature_string, " + (1 + ", feature_string, "|LocationID)"))
init_Pleasant_model <- lmerTest::lmer(Pleasant_formula, data = train)
step_Pleasant_model <- lmerTest::step(init_Pleasant_model, data = train, reduce.random=TRUE)
step_Pleasant_model
Pleasant_model <- lmerTest::get_model(step_Pleasant_model)
# Pleasant_model <- lmerTest::step(Pleasant_formula, data = prelockdownData, REML=FALSE)
sjPlot::tab_model(Pleasant_model, show.icc = TRUE, collapse.ci = TRUE, show.aic = TRUE)
sjPlot::plot_model(Pleasant_model, type="re", title = "Random effects - Pleasant", show.values = TRUE)
sjPlot::plot_model(Pleasant_model, show.values = TRUE)
MuMIn::r.squaredGLMM(Pleasant_model)
Pleasant_model <- lmerTest::get_model(step_Pleasant_model)
# Pleasant_model <- lmerTest::step(Pleasant_formula, data = prelockdownData, REML=FALSE)
sjPlot::tab_model(Pleasant_model, show.icc = TRUE, collapse.ci = TRUE, show.aic = TRUE)
sjPlot::plot_model(Pleasant_model, type="re", title = "Random effects - Pleasant", show.values = TRUE)
sjPlot::plot_model(Pleasant_model, show.values = TRUE)
MuMIn::r.squaredGLMM(Pleasant_model, data=train)
prelockdownData <- data %>% filter(Lockdown == 1)
lockdownData <- data %>% filter(Lockdown == 2)
prelockdownData[c(features)] <- scale(prelockdownData[c(features)])
# Train-test split
library(groupdata2)
set.seed(42)
parts = partition(prelockdownData, p=0.2, cat_col="LocationID")
train = parts[[2]]
test = parts[[1]]
summary(train)
summary(test)
Pleasant_formula <- as.formula(glue("Pleasant ~ 1 + ", feature_string, " + (1 + ", feature_string, "|LocationID)"))
init_Pleasant_model <- lmerTest::lmer(Pleasant_formula, data = train)
step_Pleasant_model <- lmerTest::step(init_Pleasant_model, data = train, reduce.random=TRUE)
View(prelockdownData)
step_Pleasant_model
Pleasant_model <- lmerTest::get_model(step_Pleasant_model)
# Pleasant_model <- lmerTest::step(Pleasant_formula, data = prelockdownData, REML=FALSE)
sjPlot::tab_model(Pleasant_model, show.icc = TRUE, collapse.ci = TRUE, show.aic = TRUE)
sjPlot::plot_model(Pleasant_model, type="re", title = "Random effects - Pleasant", show.values = TRUE)
sjPlot::plot_model(Pleasant_model, show.values = TRUE)
MuMIn::r.squaredGLMM(Pleasant_model, data=train)
library(readxl)
library(glue)
library(tidyr)
library(knitr)
data <- read_csv(here("data", "2021-04-16", "LondonVeniceBINResults_2020-08-13.csv"))
library(readr)
library(glue)
library(tidyr)
library(knitr)
data <- read_csv(here("data", "2021-04-16", "LondonVeniceBINResults_2020-08-13.csv"))
library(readr)
library(glue)
library(tidyr)
library(knitr)
data <- read_csv(here("data", "2021-04-16", "LondonVeniceBINResults_2020-08-13_4.csv"))
data <- as_tibble(data)
data <- data[c("GroupID", "LocationID", "Lockdown", "Pleasant", "Eventful", "Human", "Traffic", "Natural", features)]
features <- c("N_5", "S", "R", "I", "FS", "LAeq", "LAeq_10_LAeq_90", "LCeq_LAeq", "SIL.rms.", "PeakSpectralCentroid")
feature_string <- paste(features, collapse = " + ")
feature_string
library(readr)
library(glue)
library(tidyr)
library(knitr)
data <- read_csv(here("data", "2021-04-16", "LondonVeniceBINResults_2020-08-13_4.csv"))
data <- as_tibble(data)
data <- data[c("GroupID", "LocationID", "Lockdown", "Pleasant", "Eventful", "Human", "Traffic", "Natural", features)]
View(data)
names(data)
features <- c("N_5", "S", "R", "I", "FS", "LAeq", "LAeq_10_LAeq_90", "LCeq_LAeq", "SIL_50", "PeakSpectralCentroid")
feature_string <- paste(features, collapse = " + ")
feature_string
library(readr)
library(glue)
library(tidyr)
library(knitr)
data <- read_csv(here("data", "2021-04-16", "LondonVeniceBINResults_2020-08-13_4.csv"))
data <- as_tibble(data)
data["LCeq_LAeq"] <- data$LCeq - data$LAeq
data <- data[c("GroupID", "LocationID", "Lockdown", "Pleasant", "Eventful", "Human", "Traffic", "Natural", features)]
print("Full data table has dimensions: ")
print(dim(data))
print(data)
data <- data %>% mutate_at(vars(GroupID, LocationID, Lockdown), funs(as.factor))
data <- data %>% mutate_at(vars(c("Pleasant", "Eventful", "Traffic", "Human", "Natural", features)), funs(as.numeric))
head(data)
prelockdownData <- data %>% filter(Lockdown == 1)
lockdownData <- data %>% filter(Lockdown == 2)
prelockdownData[c(features)] <- scale(prelockdownData[c(features)])
# Train-test split
library(groupdata2)
set.seed(42)
parts = partition(prelockdownData, p=0.2, cat_col="LocationID")
train = parts[[2]]
test = parts[[1]]
summary(train)
summary(test)
Pleasant_formula <- as.formula(glue("Pleasant ~ 1 + ", feature_string, " + (1 + ", feature_string, "|LocationID)"))
init_Pleasant_model <- lmerTest::lmer(Pleasant_formula, data = train)
step_Pleasant_model <- lmerTest::step(init_Pleasant_model, data = train, reduce.random=TRUE)
step_Pleasant_model
Pleasant_model <- lmerTest::get_model(step_Pleasant_model)
# Pleasant_model <- lmerTest::step(Pleasant_formula, data = prelockdownData, REML=FALSE)
sjPlot::tab_model(Pleasant_model, show.icc = TRUE, collapse.ci = TRUE, show.aic = TRUE)
sjPlot::plot_model(Pleasant_model, type="re", title = "Random effects - Pleasant", show.values = TRUE)
sjPlot::plot_model(Pleasant_model, show.values = TRUE)
MuMIn::r.squaredGLMM(Pleasant_model, data=train)
Pleasant_model <- lmerTest::get_model(step_Pleasant_model)
# Pleasant_model <- lmerTest::step(Pleasant_formula, data = prelockdownData, REML=FALSE)
sjPlot::tab_model(Pleasant_model, show.icc = TRUE, collapse.ci = TRUE, show.aic = TRUE)
sjPlot::plot_model(Pleasant_model, type="re", title = "Random effects - Pleasant", show.values = TRUE)
sjPlot::plot_model(Pleasant_model, show.values = TRUE)
MuMIn::r.squaredGLMM(Pleasant_model, data=test)
MuMIn::r.squaredGLMM(Pleasant_model, data=train)
install.packages("caret")
predictions <- predict(Pleasant_model, test)
predictions
MuMIn::r.squaredGLMM(predictions)
Pleasant_model <- lmerTest::get_model(step_Pleasant_model)
# Pleasant_model <- lmerTest::step(Pleasant_formula, data = prelockdownData, REML=FALSE)
sjPlot::tab_model(Pleasant_model, show.icc = TRUE, collapse.ci = TRUE, show.aic = TRUE)
sjPlot::plot_model(Pleasant_model, type="re", title = "Random effects - Pleasant", show.values = TRUE)
sjPlot::plot_model(Pleasant_model, show.values = TRUE)
MuMIn::r.squaredGLMM(Pleasant_model)
Eventful_formula <- as.formula(glue("Eventful ~ 1 + ", feature_string, " + (1 + ", feature_string, "|LocationID)"))
init_Eventful_model <- lmerTest::lmer(Eventful_formula, data = prelockdownData)
step_Eventful_model <- lmerTest::step(init_Eventful_model, data = prelockdownData)
Eventful_formula <- as.formula(glue("Eventful ~ 1 + ", feature_string, " + (1 + ", feature_string, "|LocationID)"))
init_Eventful_model <- lmerTest::lmer(Eventful_formula, data = train)
step_Eventful_model <- lmerTest::step(init_Eventful_model, data = train)
step_Eventful_model
Eventful_model <- lmerTest::get_model(step_Eventful_model)
sjPlot::tab_model(Eventful_model, show.icc = TRUE, collapse.ci = TRUE, show.aic = TRUE)
sjPlot::plot_model(Eventful_model, type="re", title = "Random effects - Eventful", show.values = TRUE)
sjPlot::plot_model(Eventful_model, show.values = TRUE)
MuMIn::r.squaredGLMM(Eventful_model)
?mutate_at
knit_with_parameters('C:/Users/mitch/OneDrive - University College London/_PhD/Papers - Drafts/J5_JASA_Lockdown-SS/notebook/2021-04-14/New features Lockdown Modelling.Rmd')
data <- data %>% mutate_at(vars(GroupID, LocationID, Lockdown), funs(as.factor))
data <- data %>% mutate_at(vars(c("Pleasant", "Eventful", "Traffic", "Human", "Natural", features)), funs(as.numeric))
kable(head(data))
prelockdownData <- data %>% filter(Lockdown == 1)
lockdownData <- data %>% filter(Lockdown == 2)
prelockdownData[c(features)] <- scale(prelockdownData[c(features)])
# Train-test split
library(groupdata2)
set.seed(42)
parts = partition(prelockdownData, p=0.2, cat_col="LocationID")
train = parts[[2]]
test = parts[[1]]
kable(summary(train))
kable(summary(test))
Pleasant_formula <- as.formula(glue("Pleasant ~ 1 + ", feature_string, " + (1 + ", feature_string, "|LocationID)"))
init_Pleasant_model <- lmerTest::lmer(Pleasant_formula, data = train)
step_Pleasant_model <- lmerTest::step(init_Pleasant_model, data = train, reduce.random=TRUE)
kable(step_Pleasant_model)
kable(step_Eventful_model)
kable(summary(step_Eventful_model))
kable(print(step_Eventful_model))
?lmerTest::step
step$random
step_Eventful_model$random
step_Eventful_model$fixed
kable(step_Eventful_model$fixed)
kable(step_Eventful_model$random)
kable(MuMIn::r.squaredGLMM(Pleasant_model))
install.packages("lmerTest")
library(lmerTest)
install.packages("lmerTest")
library(lmerTest)
